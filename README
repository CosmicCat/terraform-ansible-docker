Code challenge solution to integrate the following technologies
- terraform/aws
- rds/mariadb
- docker swarm/ec2
- php


### Thoughts/responses
As I appreciate automation, you can build this environment with a
single command, given appropriate setup of envvars and tools. This
makes the actual ansible and terraform commands a little more
difficult to find. Look to the code in lib/build.rb if you are curious
in how I abstracted this. Build tool can be used to build entire
cluster, or you can isolate and re-run specific steps in the process
without disrupting everything else.

Docker - My PHP is far from amazing. I grabbed a basic PHP hello world
image and rewrote its index.php with basic PHP to talk to the
database. Docker image creation is the only thing not automated. Image
is here: cosmiccat/php-code-challenge. Dockerfile and my index.php are
included. Database endpoint is passed in as an environment variable.
Docker cluster is set up using ansible and each host has two
containers running.

Maria/RDS -
schema + data load: initdb.sql
fake data: db.dat script to
generate fake data: fake-data.rb
SQL to get the last 10 records, ordered by last name:
select * from users order by last_name limit 30 offset 20;

Terraform - There are two different directories, one for the full
project (terraform-main), one containing enough structure to build the
AMI via packer (terraform-packer). Direct invocation of the terraform
tool should not be necessary. The kimono is wide open - all machines
are sitting on the internet with public ip addresses.  Given more
time, I would lock down the security groups and implement a
VPN+private subnet solution with only the ELB being available to the
public.

Ansible - Inventory file is generated by build tool and is part of
'./build swarm' invocation. I use ansible only to set up the docker
swarm cluster and set up the service.

Additional Info/Answers:

One of the Docker nodes reboots
unexpectedly. How do you debug why that happened?

Its been my
experience that AWS is the cause of most of these events. Otherwise I
would look in dmesg for clues. A well designed system would shrug
these events off. More troublesome would be if these events happen
frequently.

If you could re-do this exercise using any technology you wanted (as
opposed to Ansible and Terraform) what would you use and why?

This was a great way for me to deepen my understanding regardig all of
these technologies. I would have wanted to try out Hashicorp's Nomad
tool for container management instead of docker swarm, but it was also
good for me to get more exposure to docker swarm. I had a lot of fun
with this project.

If you had to continue to support this cluster in production what
would you change/add? How would you monitor it?

This needs more love before it even makes it to
production... specifically security improvements to move everything to
private subnet and very specific security group settings. After that,
it needs log aggregation and alerting along with system monitoring and
alerting. Tooling for rolling deployment of application versions is
essential. Tests for the ruby tooling and some basic code cleanliness
would also be required. Oh, and of course SSL... currently no support
for port 443 traffic.


### HOW TO BUILD - use the build tool
but please first read/execute setup steps documented below to setup tooling/keys/envvars

To build everything - elb endpoint is a terraform output and is displayed on successful
build tool completion.
./build all

It has builtin help if you want to fiddle and rebuild something. This was very helpful
during development.
./build help

When you are done - teardown to clean up everything.
./build teardown

I also threw in packer/terraform automation to create the AMIs capable of dealing
with docker and ansible.
./build image


### REQUIREMENTS/SETUP

## Install Ruby
# install rbenv (ruby version manager) (MAC ONLY)
brew update
brew install rbenv
# set up rbenv in the shell - gives instructions about line to put in .profile
rbenv init
## Install ruby ecosystem (tooling/orchestration) - run these in the root of the checkout
# install specific verision of ruby using rbenv (.ruby-version file determines this)
rbenv install
# install bundler gem for your specific ruby version
gem install bundler
# install gems
bundle install

## install terraform bin and put it in your path
# Terraform needs all of these envvars to be set
# AWS access keys with admin level privs
export AWS_ACCESS_KEY_ID=xxxxxx
export AWS_SECRET_ACCESS_KEY=xxxxx
# only tested in us-west-2
export AWS_REGION=us-west-2
# may or may not be needed
export AWS_DEFAULT_REGION=$AWS_REGION
# expose AWS envvars to terraform
export TF_VAR_access_key=$AWS_ACCESS_KEY_ID
export TF_VAR_secret_key=$AWS_SECRET_ACCESS_KEY
export TF_VAR_region=$AWS_DEFAULT_REGION
# aws ssh keypair name - private key is used by ansible in ANSIBLE_PRIVATE_KEY_FILE
# create one if you haven't already
export TF_VAR_keypair=<name-goes-here>

## install ansible and put it in your path
## ansible configuration
# keep the y/n question from popping up for unknown host
export ANSIBLE_HOST_KEY_CHECKING=False
# path to your private key corresponding to your aws keypair
export ANSIBLE_PRIVATE_KEY_FILE=xxxxx

## install packer and put it in your path
#


